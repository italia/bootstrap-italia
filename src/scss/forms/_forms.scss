// Form properties are :root scoped to allow for easy customization of form elements.
:root {
  --#{$prefix}form-control-height: 2.5rem;
  --#{$prefix}form-control-spacing: var(--#{$prefix}spacing-xxs);
  --#{$prefix}form-control-background-color: var(--#{$prefix}color-background-inverse);
  --#{$prefix}form-control-border-color: var(--#{$prefix}color-border-secondary);
  --#{$prefix}form-control-border-radius: var(--#{$prefix}radius-smooth);
  --#{$prefix}form-control-placeholder-color: var(--#{$prefix}color-text-muted);
  --#{$prefix}form-control-label-color: var(--#{$prefix}color-text-secondary);
  --#{$prefix}form-control-text-color: var(--#{$prefix}color-text-base);
  --#{$prefix}form-control-font-size: var(--#{$prefix}body-font-size);
  --#{$prefix}form-group-spacing-y: var(--#{$prefix}spacing-m);
  --#{$prefix}form-checkbox-border-color: var(--#{$prefix}color-border-secondary);
  --#{$prefix}form-checkbox-border-radius: var(--#{$prefix}radius-smooth);
  --#{$prefix}form-checked-color: var(--#{$prefix}color-background-primary);
}

input[readonly],
textarea[readonly],
select[readonly] {
  --#{$prefix}form-control-border-color: var(--#{$prefix}color-border-subtle);
  --#{$prefix}form-control-background-color: var(--#{$prefix}color-background-muted);
  cursor: not-allowed;
}

input,
textarea,
select {
  display: block;
  width: 100%;
  padding: var(--#{$prefix}form-control-spacing);
  border: 1px solid var(--#{$prefix}form-control-border-color);
  // Note: This has no effect on <select>s in some browsers, due to the limited stylability of `<select>`s in CSS.
  border-radius: var(--#{$prefix}form-control-border-radius);
  background-color: var(--#{$prefix}form-control-background-color);
  color: var(--#{$prefix}form-control-text-color);
  font-size: var(--#{$prefix}form-control-font-size);

  &.disabled,
  &:disabled {
    border-color: var(--#{$prefix}color-border-disabled);
    // iOS fix for unreadable disabled content; see https://github.com/twbs/bootstrap/issues/11655.
    opacity: 1;
    background-color: var(--#{$prefix}color-background-disabled);
    color: var(--#{$prefix}color-text-disabled);
  }
}

input,
textarea {
  &:focus {
    outline: 3px solid transparent;
    outline-offset: 3px;
    box-shadow: 0 0 0 2px var(--#{$prefix}color-border-inverse),
    0 0 0 5px var(--#{$prefix}color-outline-focus) !important;
  }
}

input {
  // File input buttons theming //TODO: CHECK
  &::file-selector-button {
    margin: (-$input-padding-y) (-$input-padding-x);
    padding: $input-padding-y $input-padding-x;
    border-width: 0;
    border-style: solid;
    border-radius: 0; // stylelint-disable-line property-disallowed-list
    border-color: inherit;
    color: $form-file-button-color;
    pointer-events: none;
    margin-inline-end: $input-padding-x;
    border-inline-end-width: $input-border-width;
    @include gradient-bg($form-file-button-bg);
    @include transition($btn-transition);
  }

  //TODO: CHECK
  &:hover:not(:disabled):not([readonly])::file-selector-button {
    background-color: $form-file-button-hover-bg;
  }

  &[type='file'] {
    overflow: hidden; // prevent pseudo element button overlap

    &:not(:disabled):not([readonly]) {
      cursor: pointer;
    }
  }

  // Add some height to date inputs on iOS
  // https://github.com/twbs/bootstrap/issues/23307
  &::-webkit-date-and-time-value {
    // Multiply line-height by 1em if it has no unit
    height: if(unit($input-line-height)=='', $input-line-height * 1em, $input-line-height);
  }
}

select {
  // padding: $form-select-padding-y $form-select-indicator-padding $form-select-padding-y $form-select-padding-x;
  // -moz-padding-start: subtract($form-select-padding-x, 3px); // See https://github.com/twbs/bootstrap/issues/32636
  // font-family: $form-select-font-family;
  // @include font-size($form-select-font-size);
  // font-weight: $form-select-font-weight;
  // line-height: $form-select-line-height;
  // color: $form-select-color;
  // background-color: $form-select-bg;
  background-image: escape-svg($form-select-indicator);
  background-repeat: no-repeat;
  background-position: right var(--#{$prefix}form-control-spacing) center;
  background-size: 16px 12px;
  // border: $form-select-border-width solid $form-select-border-color;
  // @include border-radius($form-select-border-radius, 0);
  // @include box-shadow($form-select-box-shadow);
  // @include transition($form-select-transition);
  appearance: none;

  &:focus {
    border-color: $form-select-focus-border-color;
    outline: 0;

    @if $enable-shadows {
      @include box-shadow($form-select-box-shadow, $form-select-focus-box-shadow);
    }

    @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: $form-select-focus-box-shadow;
    }
  }

  &[multiple],
  &[size]:not([size='1']) {
    padding-right: $form-select-padding-x;
    background-image: none;
  }

  &:disabled {
    border-color: $form-select-disabled-border-color;
    background-color: $form-select-disabled-bg;
    color: $form-select-disabled-color;

    &:hover {
      cursor: not-allowed;
    }
  }

  // Remove outline from select box in FF
  &:-moz-focusring {
    color: transparent;
    text-shadow: 0 0 0 $form-select-color;
  }

  option {
    font-weight: normal;
  }

  &:disabled {
    opacity: 1;
    background-color: $input-disabled-bg;
  }
}

textarea {
  height: auto;
  font-size: var(--#{$prefix}body-font-size);
  line-height: 1.5;
}

label {
  display: inline-block;
  width: auto;
  max-width: 100%;
  margin-bottom: var(--#{$prefix}spacing-xxs);
  color: var(--#{$prefix}form-control-label-color);
  font-size: var(--#{$prefix}label-font-size-s);
  font-weight: var(--#{$prefix}font-weight-solid);
  line-height: var(--#{$prefix}label-line-height);
}

input,
textarea {
  outline: 0;
  box-shadow: none;
  transition: none;
  appearance: none;
}

input[type='date'],
input[type='datetime-local'],
input[type='time'] {
  display: flex;
}

//TODO: CHECK
fieldset {
  legend {
    z-index: 1;
    display: block;
    width: auto;
    max-width: 100%;
    margin-bottom: 0;
    padding: 0 var(--#{$prefix}form-input-spacing-x);
    float: none;
    background-color: transparent;
    color:var(--#{$prefix}form-input-color);
    font-size: $small-font-size;
    font-weight: 700;
    line-height: calc(#{$input-height} - 1px);
    transition: 0.2s ease-out;
    cursor: text;
  }
}

::placeholder {
  color: var(--#{$prefix}form-control-placeholder-color);
}

// WebKit datetime edit fields
input::-webkit-datetime-edit {
  background-color: var(--#{$prefix}color-background-primary-lighter);
  color: var(--#{$prefix}form-contro-text-color);
}

//
// Form Group

.form-group {
  position: relative;
  margin-bottom: var(--#{$prefix}form-group-spacing-y);

  label.input-symbol-label:not(.active) {
    left: 2.25rem;
  }

  small.form-text {
    margin: 0;
    font-size: $small-font-size;
  }

  input[type='time']~label {
    font-size: $small-font-size;
  }
}

//
// Form text

.form-text {
  margin: var(--#{$prefix}spacing-xxs) 0;
  color: var(--#{$prefix}color-text-secondary);
}


//
// Form Group

.form-group.active .form-file-name {
  padding-bottom: 1.95rem;
}

.warning-feedback {
  display: none;
  width: 100%;
  margin-top: 0.25rem;
  color: var(--#{$prefix}color-text-warning);
  font-size: 0.75rem;
}

.valid-feedback,
.invalid-feedback,
.warning-feedback {
  margin-left: 0.5rem;
}

// Input group
.input-group {
  .input-group-text .btn {
    border-radius: var(--#{$prefix}form-control-border-radius) 0 0 var(--#{$prefix}form-control-border-radius);
  }

  .input-group-append {
    margin-left: 0;

    .btn {
      height: 100%;
      padding-top: 0;
      padding-bottom: 0;
      border-bottom: 1px solid $input-border;
      border-radius: 0 var(--#{$prefix}form-control-border-radius) var(--#{$prefix}form-control-border-radius) 0;
    }
  }
}

//
// Form check class valid for checkbox and radio

.form-check {
  position: relative;
  margin-bottom: var(--#{$prefix}spacing-s);
  padding-left: 0;

  // Add vertical spacing for consequential elements
  &+& {
    margin-top: var(--#{$prefix}spacing-s);
  }

  [type='checkbox'],
  [type='radio'] {
    position: absolute;
    // top: 9px;
    // left: 9px;
    height: 100%;
    margin-top: 0;
    margin-left: 0;
    opacity: 0;

    +label {
      position: relative;
      display: flex;
      align-items: center;
      padding-left: var(--#{$prefix}spacing-m);
      font-size: var(--#{$prefix}label-font-size);
      font-weight: var(--#{$prefix}font-weight-solid);
      line-height: 1;
      cursor: pointer;
      user-select: none;

      @include media-breakpoint-up(sm) {
        font-size: var(--#{$prefix}label-font-size-m);
      }
    }

    &:focus+label {
      @extend %focus;
    }

    &:focus[data-focus-mouse='true'] + label {
      @extend %focusmouse;
    }
  }

  input[type='checkbox'] {
    +label::after,
    +label::before {
      position: absolute;
      left: 0;
      z-index: 1;
      content: '';
      border-width: 2px;
      border-style: solid;
      transition: all var(--#{$prefix}transition-instant) ease-out;
    }

    // Checkbox shape
    +label::after {
      top: 0;
      width: 20px;
      height: 20px;
      border-radius: var(--#{$prefix}form-control-border-radius);
    }

    &:checked+label::before {
      top: 3px;
      left: 3px;
      width: 6px;
      height: 12px;
      border-width: 2px;
      border-style: solid;
      border-color: transparent var(--#{$prefix}color-border-inverse) var(--#{$prefix}color-border-inverse) transparent;
      opacity: 1;
      transform: rotate(40deg);
      transform-origin: 100% 100%;
      backface-visibility: hidden;
    }

    &:checked+label::after {
      z-index: 0;
      border-color: var(--#{$prefix}form-checked-color);
      background-color: var(--#{$prefix}form-checked-color);
    }

    &:not(:checked)+label::after {
      z-index: 0;
      border-color: var(--#{$prefix}form-checkbox-border-color);
      background-color: transparent;
    }

    &:not(:checked)+label::before {
      top: 10px;
      left: 6px;
      width: 0;
      height: 0;
      border-color: transparent;
    }

    &:disabled+label {
      opacity: 1;
      cursor: not-allowed;
    }

    &:disabled:not(:checked)+label::after {
      border-color: var(--#{$prefix}color-border-disabled);
      background-color: transparent;
    }

    &:disabled:checked+label::after {
      border-color: var(--#{$prefix}color-border-disabled);
      background-color: var(--#{$prefix}color-border-disabled);
    }
  }

  //
  // Radio button

  input[type='radio'] {
    +label {

      // Radio button shape
      &::after,
      &::before {
        position: absolute;
        top: 0;
        left: 0;
        z-index: 0;
        content: '';
        width: 20px;
        height: 20px;
        border-width: 2px;
        border-style: solid;
        border-radius: var(--#{$prefix}radius-rounded);
        transition: all var(--#{$prefix}transition-instant) ease-out;
      }
    }

    &:not(:checked)+label {
      &::after,
      &::before {
        border-color: var(var(--#{$prefix}form-checkbox-border-color));
      }

      &:after {
        z-index: -1;
        transform: scale(0);
      }
    }

    &:checked+label {
      &::after {
        z-index: 0;
        border-color: var(--#{$prefix}form-checked-color);
        background-color: var(--#{$prefix}form-checked-color);
        transform: scale(0.64);
      }

      &::before {
        border-color: var(--#{$prefix}form-checked-color);
      }
    }

    &:disabled {
      &+label {
        cursor: not-allowed;
      }

      &:not(:checked)+label {
        &::after,
        &::before {
          border-color: var(--#{$prefix}color-border-disabled);
        }
      }

      &:checked+label {
        &::after {
          border-color: var(--#{$prefix}color-border-disabled);
          background-color: var(--#{$prefix}color-border-disabled);
        }

        &::before {
          border-color: var(--#{$prefix}color-border-disabled);
        }
      }
    }
  }

  //
  // Checkbox group

  &.form-check-group {
    margin-bottom: 1rem;
    padding: 0 0 1rem 0;
    box-shadow: inset 0 -1px 0 0 rgba(1, 1, 1, 0.1);

    input[type='checkbox']+label,
    input[type='radio']+label {
      padding-right: 3.25rem;
      padding-left: 0;

      &::after,
      &::before {
        right: 0;
        left: auto;
      }
    }

    input[type='checkbox']:checked+label::before {
      right: 11px;
    }

    input[type='radio']:checked+label::before {
      right: 0;
    }

    .form-text {
      display: block;
      margin-bottom: 0.5rem;
      padding-right: 3.25rem;
    }

    input.semi-checked:not(:checked)+label::before {
      right: 4px;
      left: auto;
    }
  }

  input.semi-checked:not(:checked)+label::before {
    top: 9px;
    left: 4px;
    width: 12px;
    height: 2px;
    border-width: 0;
    border-style: none;
    border-color: transparent;
    opacity: 1;
    background: var(--#{$prefix}color-background-inverse);
    transform: none;
    backface-visibility: hidden;
  }

  input.semi-checked:not(:checked)+label::after {
    z-index: 0;
    border-color: var(--#{$prefix}form-checked-color);
    background-color: var(--#{$prefix}form-checked-color);
  }
}

//
// Form check reduce motion
// This is a workaround for the fact that the transition property is not inherited
// by pseudo-elements. This means that if the user has set the prefers-reduced-motion
// media query, the transition will not be applied to the pseudo-elements.
@media (prefers-reduced-motion: reduce) {
  fieldset legend,
  .form-group label,
  textarea,
  .form-check [type='checkbox'],
  .form-check [type='radio'],
  .form-check [type='checkbox']+label::after,
  .form-check [type='checkbox']+label::before,
  .form-check [type='radio']+label::after,
  .form-check [type='radio']+label::before,
  .toggles label input[type='checkbox']+.lever::before,
  .toggles label input[type='checkbox']+.lever::after {
    transition: none !important;
  }
}
